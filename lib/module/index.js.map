{"version":3,"names":["NativeModules","NativeSDK","RNMarketingCloud","Proxy","get","Error","SFMCSDK","initializeSDK","setDebugLoggingEnabled","enabled","getDeviceToken","getProfileId","setProfileId","profileId","setProfileAttributes","attributes","isPushEnabled","setPushEnabled","getAllMessages","messages","map","message","id","subject","url","read","deleted","sendDateEpoch","startDateEpoch","endDateEpoch","today","Date","result","sendDateUtc","startDateUtc","endDateUtc","setDate","getDate","getAllMessagesCount","getUnreadMessagesCount","markMessageDeleted","messageId","markMessageRead","markAllMessagesDeleted","markAllMessagesRead","refreshMessages"],"sources":["index.tsx"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nconst NativeSDK = NativeModules.RNMarketingCloud\n  ? NativeModules.RNMarketingCloud\n  : new Proxy({}, {\n    get() {\n      throw new Error(\"The package 'react-native-marketingcloud' doesn't seem to be linked.\");\n    }\n  });\n\nexport interface InboxMessage {\n  id: string\n  subject: string\n  url: string\n  read: boolean\n  deleted: boolean\n  sendDateUtc: Date\n  startDateUtc: Date\n  endDateUtc: Date\n}\n\nexport class SFMCSDK {\n  /**\n   * Initializes the Salesforce Marketing Cloud SDK.\n   */\n  static async initializeSDK() {\n    return NativeSDK.initializeSDK()\n  }\n\n  /**\n   * Enables or disables verbose logging within the native Marketing Cloud SDK.\n   * @param enabled - The value to enable / disable verbose logging\n   */\n  static setDebugLoggingEnabled(enabled: boolean) {\n    NativeSDK.setDebugLoggingEnabled(enabled)\n  }\n\n  // PUSH MESSAGING\n\n  /**\n   * Returns the token used to send push messages to the device.\n   * @returns A promise to the system token string.\n   */\n  static getDeviceToken(): Promise<string> {\n    return NativeSDK.getDeviceToken()\n  }\n\n  /**\n   * Returns the profile id currently set on the device.\n   * @returns A promise to the current profile id.\n   */\n  static async getProfileId(): Promise<string | null> {\n    return NativeSDK.getProfileId()\n  }\n\n  /**\n   * Sets the profile id for the device's user.\n   * @param profileId - The value to be set as the profile id of the device's user.\n   */\n  static setProfileId(profileId: string) {\n    NativeSDK.setProfileId(profileId)\n  }\n\n  /**\n   * Sets custom profile attributes on the push notification record.\n   * @param attributes The attributes keys and values to set\n   */\n  static async setProfileAttributes(attributes: Record<string, string>) {\n    NativeSDK.setProfileAttributes(attributes)\n  }\n\n  /**\n   * Indicates if the push messaging functionality is enabled.\n   * @returns A promise to the boolean representation of whether push is enabled.\n   */\n  static isPushEnabled(): Promise<boolean> {\n    return NativeSDK.isPushEnabled()\n  }\n\n  /**\n   * Enables or disables the push messaging functionality.\n   * @param enabled - The value to enable / disable push messaging.\n   */\n  static setPushEnabled(enabled: boolean) {\n    NativeSDK.setDebugLoggingEnabled(enabled)\n  }\n\n  // PUSH MESSAGING INBOX\n\n  /**\n   * Returns all messages in the inbox.\n   * @returns A promise to a list of inbox messages.\n   */\n  static async getAllMessages(): Promise<InboxMessage> {\n    const messages = await NativeSDK.getAllMessages()\n    return messages.map((message: any) => {\n      const {\n        id, subject, url, read, deleted,\n        sendDateEpoch, startDateEpoch, endDateEpoch\n      } = message\n\n      const today = new Date()\n      const result: InboxMessage = {\n        id, subject, read, deleted, url,\n        sendDateUtc: sendDateEpoch ? new Date(sendDateEpoch) : today,\n        startDateUtc: startDateEpoch ? new Date(startDateEpoch) : today,\n        endDateUtc: endDateEpoch ? new Date(endDateEpoch) : today\n      }\n\n      // Make sure that the start date is not the same as the end date\n      if (result.endDateUtc === result.startDateUtc) {\n        result.endDateUtc = result.startDateUtc\n        result.endDateUtc.setDate(result.startDateUtc.getDate() + 1)\n      }\n\n      return result\n    })\n  }\n\n  /**\n   * Returns the total number of messages in the inbox.\n   * @returns A promise to the number of inbox messages.\n   */\n  static async getAllMessagesCount(): Promise<number> {\n    return NativeSDK.getAllMessagesCount()\n  }\n\n  /**\n   * Returns the number of unread messages in the inbox.\n   * @returns A promise to the number of unread inbox messages\n   */\n  static async getUnreadMessagesCount(): Promise<number> {\n    return NativeSDK.getUnreadMessagesCount()\n  }\n\n  /**\n   * Marks a single message as deleted.\n   * @param messageId - The message to mark as deleted\n   * @returns A boolean indicating if the action was succesfull\n   */\n  static async markMessageDeleted(messageId: string): Promise<boolean> {\n    return NativeSDK.markMessageDeleted(messageId)\n  }\n\n  /**\n   * Marks a single message as read.\n   * @param messageId - The message to mark as read\n   * @returns A boolean indicating if the action was succesfull\n   */\n  static async markMessageRead(messageId: string): Promise<boolean> {\n    return NativeSDK.markMessageRead(messageId)\n  }\n\n  /**\n   * Marks all messages in the inbox as deleted.\n   * @returns A boolean indicating if the action was succesfull\n   */\n  static async markAllMessagesDeleted(): Promise<boolean> {\n    return NativeSDK.markAllMessagesDeleted()\n  }\n\n  /**\n   * Marks all messages in the inbox as read.\n   * @returns A boolean indicating if the action was succesfull\n   */\n  static async markAllMessagesRead(): Promise<boolean> {\n    return NativeSDK.markAllMessagesRead()\n  }\n\n  /**\n   * Reload and refresh Inbox messages from the MarketingCloud server.\n   * The underlying request to the server will be throttled such that it will execute at most every 60 seconds.\n   */\n  static async refreshMessages(): Promise<boolean> {\n    return NativeSDK.refreshMessages()\n  }\n}\n\nexport default SFMCSDK\n"],"mappings":"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"}